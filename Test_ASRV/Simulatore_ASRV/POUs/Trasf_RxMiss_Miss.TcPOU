<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="Trasf_RxMiss_Miss" Id="{bcc7bd1b-ad1e-49c7-be63-bc67d0d506fb}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION Trasf_RxMiss_Miss
VAR_INPUT
	auxRxMis : REFERENCE TO RX_MIS_PC;
	auxMis   : REFERENCE TO MIS_PC;
END_VAR
VAR
	ni 			: UINT :=0;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[//---------------------------------------------------------------------
// Trasferisce Buffer Missione Rx da PC in Missione ASRV
// Scompatta la Word comandi (16 bit) nella struttura comandi (16 byte)
// MISSIONE Rx --> Missione ASRV
//---------------------------------------------------------------------
// Per evitare di trasferire un dato osoleto, viene sempre azzerato
// il valore di Tot_Step del buffer Rx (non può essere mai 0) 
// in questo modo conpila i dati solo se sono stati effettivamente ricevuti
//---------------------------------------------------------------------------
IF auxRxMis.Tot_step_PC>0 THEN
	auxMis.Tot_step_PC   := auxRxMis.Tot_step_PC;
	auxMis.Pstart_PC     := auxRxMis.Pstart_PC;
	auxMis.Pend_PC       := auxRxMis.Pend_PC;
	auxMis.Typ_car_PC    := auxRxMis.Typ_car_PC;
	auxMis.MisFree1      := auxRxMis.MisFree1;
	auxMis.MisFree2      := auxRxMis.MisFree2;
	auxMis.MisFree3      := auxRxMis.MisFree3;
	//----------- ciclo per tutti gli Step
	FOR ni :=0 TO MAX_STEP_MISS BY 1 DO
		auxMis.Step_PC[ni].ps        := auxRxMis.Step_PC[ni].ps;
		auxMis.Step_PC[ni].dist      := auxRxMis.Step_PC[ni].dist;
		auxMis.Step_PC[ni].rall 	 := auxRxMis.Step_PC[ni].rall;
		auxMis.Step_PC[ni].CmFree1   := auxRxMis.Step_PC[ni].CmFree1;
		auxMis.Step_PC[ni].CmFree2   := auxRxMis.Step_PC[ni].CmFree2;
		auxMis.Step_PC[ni].CmFree3   := auxRxMis.Step_PC[ni].CmFree3;
		//------------------------ Step comandi word -> Bool 
		auxMis.Step_PC[ni].comandi.In_Mov_X   := WORD_TO_BOOL( auxRxMis.Step_PC[ni].comandi AND 1);
		auxMis.Step_PC[ni].comandi.In_Mov_Y   := WORD_TO_BOOL( auxRxMis.Step_PC[ni].comandi AND 2);
		auxMis.Step_PC[ni].comandi.In_Mov_Av  := WORD_TO_BOOL( auxRxMis.Step_PC[ni].comandi AND 4);
		auxMis.Step_PC[ni].comandi.In_Mov_Ind := WORD_TO_BOOL( auxRxMis.Step_PC[ni].comandi AND 8);
		auxMis.Step_PC[ni].comandi.CarSoll_0  := WORD_TO_BOOL( auxRxMis.Step_PC[ni].comandi AND 16);
		auxMis.Step_PC[ni].comandi.CarSoll_1  := WORD_TO_BOOL( auxRxMis.Step_PC[ni].comandi AND 32);
		auxMis.Step_PC[ni].comandi.Scarica    := WORD_TO_BOOL( auxRxMis.Step_PC[ni].comandi AND 64);
		auxMis.Step_PC[ni].comandi.Lenta      := WORD_TO_BOOL( auxRxMis.Step_PC[ni].comandi AND 128);
		auxMis.Step_PC[ni].comandi.End        := WORD_TO_BOOL( auxRxMis.Step_PC[ni].comandi AND 256);
		auxMis.Step_PC[ni].comandi.Aux9       := WORD_TO_BOOL( auxRxMis.Step_PC[ni].comandi AND 512);
		auxMis.Step_PC[ni].comandi.Aux10      := WORD_TO_BOOL( auxRxMis.Step_PC[ni].comandi AND 1024);
		auxMis.Step_PC[ni].comandi.Aux11      := WORD_TO_BOOL( auxRxMis.Step_PC[ni].comandi AND 2048);
		auxMis.Step_PC[ni].comandi.Aux12      := WORD_TO_BOOL( auxRxMis.Step_PC[ni].comandi AND 4096);
		auxMis.Step_PC[ni].comandi.Aux13      := WORD_TO_BOOL( auxRxMis.Step_PC[ni].comandi AND 8192);
		auxMis.Step_PC[ni].comandi.Aux14      := WORD_TO_BOOL( auxRxMis.Step_PC[ni].comandi AND 16384);
		auxMis.Step_PC[ni].comandi.Aux15      := WORD_TO_BOOL( auxRxMis.Step_PC[ni].comandi AND 32768);
	END_FOR
	//----------- azzera Tot_step_PC su buffer RX
	auxRxMis.Tot_step_PC := 0;
END_IF]]></ST>
    </Implementation>
    <LineIds Name="Trasf_RxMiss_Miss">
      <LineId Id="10" Count="0" />
      <LineId Id="47" Count="1" />
      <LineId Id="11" Count="0" />
      <LineId Id="49" Count="0" />
      <LineId Id="62" Count="3" />
      <LineId Id="86" Count="0" />
      <LineId Id="13" Count="3" />
      <LineId Id="51" Count="2" />
      <LineId Id="17" Count="25" />
      <LineId Id="74" Count="1" />
      <LineId Id="7" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>